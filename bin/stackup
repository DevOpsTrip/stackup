#!/usr/bin/env ruby

$LOAD_PATH << File.expand_path("../../lib", __FILE__)

require "clamp"
require "console_logger"
require "stackup"
require "multi_json"
require "yaml"

Clamp do

  option "--debug", :flag, "enable debugging"

  option ["-f", "--format"], "FORMAT", "output format", :default => "yaml"

  parameter "NAME", "Name of stack", :attribute_name => :stack_name

  def run(*args)
    super(*args)
  rescue Stackup::NoSuchStack => e
    signal_error "stack '#{stack_name}' does not exist"
  rescue Stackup::StackUpdateError => e
    signal_error e.message
  end

  private

  def logger
    @logger ||= ConsoleLogger.new($stdout, debug?)
  end

  def format_data(data)
    case format.downcase
    when "json"
      MultiJson.dump(data, :pretty => true)
    when "yaml"
      YAML.dump(data)
    end
  end

  def display_data(data)
    puts format_data(data)
  end

  def stackup
    Stackup(:logger => logger, :log_level => :debug)
  end

  def stack
    stackup.stack(stack_name)
  end

  def report_change
    change = yield
    puts "Stack #{change}" unless change.nil?
  end

  subcommand "status", "Print stack status." do

    def execute
      puts stack.status
    end

  end

  subcommand "up", "Create/update the stack" do

    parameter "TEMPLATE", "CloudFormation template (.json)", :attribute_name => :template_file

    def execute
      template = File.read(template_file)
      report_change { stack.create_or_update(template) }
    end

  end

  subcommand ["down", "delete"], "Remove the stack." do

    def execute
      report_change { stack.delete }
    end

  end

  subcommand "outputs", "Stack outputs." do

    def execute
      display_data(stack.outputs)
    end

  end

end
