#!/usr/bin/env ruby

$LOAD_PATH << File.expand_path("../../lib", __FILE__)

require "clamp"
require "console_logger"
require "multi_json"
require "stackup"
require "stackup/differ"
require "stackup/version"
require "yaml"

$stdout.sync = true
$stderr.sync = true

Clamp do

  option ["-L", "--list"], :flag, "list stacks" do
    list_stacks
    exit 0
  end

  option ["-Y", "--yaml"], :flag, "output data in YAML format"

  option ["--region"], "REGION", "set region" do |arg|
    unless arg =~ /^[a-z]{2}-[a-z]+-\d$/
      fail ArgumentError, "#{arg.inspect} doesn't look like a region"
    end
    Aws.config.update(:region => arg)
    arg
  end

  option "--debug", :flag, "enable debugging"

  option ["--version"], :flag, "display version" do
    puts "stackup v#{Stackup::VERSION}"
    exit 0
  end

  parameter "NAME", "Name of stack", :attribute_name => :stack_name

  def run(arguments)
    super(arguments)
  rescue Stackup::ServiceError => e
    signal_error e.message
  rescue Aws::Errors::MissingCredentialsError
    signal_error "no credentials provided"
  rescue Aws::CloudFormation::Errors::ExpiredToken => e
    signal_error e.message
  end

  private

  def logger
    @logger ||= ConsoleLogger.new($stdout, debug?)
  end

  def format_data(data)
    if yaml?
      YAML.dump(data)
    else
      MultiJson.dump(data, :pretty => true)
    end
  end

  def display_data(data)
    puts format_data(data)
  end

  def stackup
    Stackup(:logger => logger, :log_level => :debug)
  end

  def stack
    stackup.stack(stack_name)
  end

  def list_stacks
    stackup.stack_names.each do |name|
      puts name
    end
  end

  def report_change
    final_status = yield
    puts final_status unless final_status.nil?
  end

  def load_data(file)
    YAML.load_file(file)
  rescue Errno::ENOENT
    signal_error "no such file: #{file.inspect}"
  end

  subcommand "status", "Print stack status." do

    def execute
      puts stack.status
    end

  end

  subcommand "up", "Create/update the stack" do

    option ["-t", "--template"], "FILE", "template file",
           :attribute_name => :template_file

    option ["-T", "--use-previous-template"], :flag,
           "reuse the existing template"

    option ["-p", "--parameters"], "FILE", "parameters file",
           :attribute_name => :parameters_file

    option ["-o", "--override"], "PARAM=VALUE", "parameters overrides",
           :multivalued => true,
           :attribute_name => :override_list

    option "--tags", "FILE", "stack tags file",
           :attribute_name => :tags_file

    option "--policy", "FILE", "stack policy file",
           :attribute_name => :policy_file

    option "--on-failure", "ACTION",
           "when stack creation fails: DO_NOTHING, ROLLBACK, or DELETE",
           :default => "ROLLBACK"

    def execute
      unless template_file || use_previous_template?
        signal_usage_error "Specify either --template or --use-previous-template"
      end
      options = {}
      options[:template] = load_data(template_file) if template_file
      options[:on_failure] = on_failure
      options[:parameters] = parameters
      options[:tags] = load_data(tags_file) if tags_file
      options[:stack_policy] = load_data(policy_file) if policy_file
      options[:use_previous_template] = use_previous_template?
      report_change do
        stack.create_or_update(options)
      end
    end

    private

    def parameters
      parameters_from_file.merge(parameter_overrides)
    end

    def parameters_from_file
      return {} unless parameters_file
      Stackup::Parameters.new(load_data(parameters_file)).to_hash
    end

    def parameter_overrides
      {}.tap do |result|
        override_list.each do |override|
          key, value = override.split("=", 2)
          result[key] = value
        end
      end
    end

  end

  subcommand "diff", "Compare template/params to current stack." do

    option ["-t", "--template"], "FILE", "template file",
           :attribute_name => :template_file

    option ["-p", "--parameters"], "FILE", "parameters file",
           :attribute_name => :parameters_file

    option "--diff-format", "FORMAT", "'text', 'color', or 'html'", :default => "color"

    def execute
      current = {}
      planned = {}
      if template_file
        current["Template"] = stack.template
        planned["Template"] = load_data(template_file)
      end
      if parameters_file
        current["Parameters"] = existing_parameters.sort.to_h
        planned["Parameters"] = new_parameters.sort.to_h
      end
      signal_usage_error "specify '--template' or '--parameters'" if planned.empty?
      puts differ.diff(current, planned)
    end

    private

    def differ
      Stackup::Differ.new(diff_format, &method(:format_data))
    end

    def existing_parameters
      @existing_parameters ||= stack.parameters
    end

    def new_parameters
      result = load_data(parameters_file)
      result = Stackup::Parameters.new(result).to_hash
      result = existing_parameters.merge(result)
      result.sort
    end

  end

  subcommand ["down", "delete"], "Remove the stack." do

    def execute
      report_change do
        stack.delete
      end
    end

  end

  subcommand "cancel-update", "Cancel the update in-progress" do

    def execute
      report_change do
        stack.cancel_update
      end
    end

  end

  subcommand "wait", "Wait until stack is stable" do

    def execute
      puts stack.wait
    end

  end

  subcommand "events", "List stack events" do

    option ["-f", "--follow"], :flag, "follow new events"
    option ["--data"], :flag, "display events as data"

    def execute
      stack.watch(false) do |watcher|
        loop do
          watcher.each_new_event do |event|
            display_event(event)
          end
          break unless follow?
          sleep 5
        end
      end
    end

    private

    def display_event(e)
      if data?
        display_data(event_data(e))
      else
        puts event_summary(e)
      end
    end

    def event_data(e)
      {
        "timestamp" => e.timestamp.localtime,
        "logical_resource_id" => e.logical_resource_id,
        "physical_resource_id" => e.physical_resource_id,
        "resource_status" => e.resource_status,
        "resource_status_reason" => e.resource_status_reason
      }.reject { |_k, v| blank?(v) }
    end

    def blank?(v)
      v.nil? || v.respond_to?(:empty?) && v.empty?
    end

    def event_summary(e)
      summary = "[#{e.timestamp.localtime.iso8601}] #{e.logical_resource_id}"
      summary += " - #{e.resource_status}"
      summary += " - #{e.resource_status_reason}" if e.resource_status_reason
      summary
    end

  end

  subcommand "template", "Display stack template." do

    def execute
      display_data(stack.template)
    end

  end

  subcommand "parameters", "Display stack parameters." do

    def execute
      display_data(stack.parameters)
    end

  end

  subcommand "resources", "Display stack resources." do

    def execute
      display_data(stack.resources)
    end

  end

  subcommand "outputs", "Display stack outputs." do

    def execute
      display_data(stack.outputs)
    end

  end

  subcommand "inspect", "Display stack particulars" do

    def execute
      data = {
        "Status" => stack.status,
        "Parameters" => stack.parameters,
        "Tags" => stack.tags,
        "Resources" => stack.resources,
        "Outputs" => stack.outputs
      }
      display_data(data)
    end

  end

end
